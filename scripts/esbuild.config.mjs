import fs from 'node:fs';
import process from 'node:process';

import builtins from 'builtin-modules';
import esbuild from 'esbuild';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the GitHub repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';

const renamePlugin = () => ({
	name: 'rename-plugin',
	setup(build) {
		build.onEnd(() => {
			const DEFAULT_CSS_OUTFILE = 'main.css';
			const OBSIDIAN_CSS_OUTFILE = 'styles.css';

			if (!fs.existsSync(DEFAULT_CSS_OUTFILE)) {
				return;
			}

			try {
				fs.renameSync(DEFAULT_CSS_OUTFILE, OBSIDIAN_CSS_OUTFILE);
			} catch (error) {
				console.error('Failed to rename CSS outfile:', error);
			}
		});
	},
});

const context = await esbuild.context({
	logLevel: 'info',
	plugins: [renamePlugin()],
	entryPoints: ['src/main.ts'],
	outfile: 'main.js',
	bundle: true,
	format: 'cjs',
	target: 'es2018',
	minify: prod,
	treeShaking: true,
	sourcemap: prod ? false : 'inline',
	banner: {
		js: banner,
		css: banner,
	},
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins,
	],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
